TOKEN: LPAREN    LEXEME: (
TOKEN: PRINT     LEXEME: print
TOKEN: LPAREN    LEXEME: (
TOKEN: AND       LEXEME: and
LOG_OP -> and
BIN_OP -> LOG_OP
TOKEN: LPAREN    LEXEME: (
TOKEN: GE        LEXEME: >=
REL_OP -> >=
BIN_OP -> REL_OP
TOKEN: INTCONST  LEXEME: 5
CONST -> INTCONST
EXPR -> CONST
TOKEN: INTCONST  LEXEME: 6
CONST -> INTCONST
EXPR -> CONST
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: LPAREN    LEXEME: (
TOKEN: NOT       LEXEME: not
UN_OP -> not
TOKEN: LPAREN    LEXEME: (
TOKEN: EQ        LEXEME: =
REL_OP -> =
BIN_OP -> REL_OP
TOKEN: STRCONST  LEXEME: "happy"
CONST -> STRCONST
EXPR -> CONST
TOKEN: STRCONST  LEXEME: "sad"
CONST -> STRCONST
EXPR -> CONST
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
ARITHLOGIC_EXPR -> UN_OP EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
PRINT_EXPR -> print EXPR
PARENTHESIZED_EXPR -> PRINT_EXPR
TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )
START -> EXPR

---- Completed parsing ----

