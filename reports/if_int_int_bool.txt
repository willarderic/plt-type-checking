TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: IF  LEXEME: if						TOKEN: IF        LEXEME: if
TOKEN: INTCONST  LEXEME: 0					TOKEN: INTCONST  LEXEME: 0
CONST -> INTCONST						CONST -> INTCONST
EXPR -> CONST							EXPR -> CONST
TOKEN: INTCONST  LEXEME: 1					TOKEN: INTCONST  LEXEME: 1
CONST -> INTCONST						CONST -> INTCONST
EXPR -> CONST							EXPR -> CONST
TOKEN: NIL  LEXEME: nil						TOKEN: NIL       LEXEME: nil
CONST -> nil							CONST -> nil
EXPR -> CONST							EXPR -> CONST
IF_EXPR -> IF EXPR EXPR EXPR					IF_EXPR -> if EXPR EXPR EXPR
PARENTHESIZED_EXPR -> IF_EXPR					PARENTHESIZED_EXPR -> IF_EXPR
TOKEN: RPAREN  LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
START -> EXPR							START -> EXPR

---- Completed parsing ----					---- Completed parsing ----

