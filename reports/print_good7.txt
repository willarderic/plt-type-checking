TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: PRINT  LEXEME: print					TOKEN: PRINT     LEXEME: print
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: AND  LEXEME: and						TOKEN: AND       LEXEME: and
LOG_OP -> and							LOG_OP -> and
BIN_OP -> LOG_OP						BIN_OP -> LOG_OP
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: GE  LEXEME: >=						TOKEN: GE        LEXEME: >=
REL_OP -> >=							REL_OP -> >=
BIN_OP -> REL_OP						BIN_OP -> REL_OP
TOKEN: INTCONST  LEXEME: 5					TOKEN: INTCONST  LEXEME: 5
CONST -> INTCONST						CONST -> INTCONST
EXPR -> CONST							EXPR -> CONST
TOKEN: INTCONST  LEXEME: 6					TOKEN: INTCONST  LEXEME: 6
CONST -> INTCONST						CONST -> INTCONST
EXPR -> CONST							EXPR -> CONST
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR				ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR				PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN  LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: NOT  LEXEME: not						TOKEN: NOT       LEXEME: not
UN_OP -> not							UN_OP -> not
TOKEN: LPAREN  LEXEME: (					TOKEN: LPAREN    LEXEME: (
TOKEN: EQ  LEXEME: =						TOKEN: EQ        LEXEME: =
REL_OP -> =							REL_OP -> =
BIN_OP -> REL_OP						BIN_OP -> REL_OP
TOKEN: STRCONST  LEXEME: "happy"				TOKEN: STRCONST  LEXEME: "happy"
CONST -> STRCONST						CONST -> STRCONST
EXPR -> CONST							EXPR -> CONST
TOKEN: STRCONST  LEXEME: "sad"					TOKEN: STRCONST  LEXEME: "sad"
CONST -> STRCONST						CONST -> STRCONST
EXPR -> CONST							EXPR -> CONST
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR				ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR				PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN  LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
ARITHLOGIC_EXPR -> UN_OP EXPR					ARITHLOGIC_EXPR -> UN_OP EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR				PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN  LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR				ARITHLOGIC_EXPR -> BIN_OP EXPR EXPR
PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR				PARENTHESIZED_EXPR -> ARITHLOGIC_EXPR
TOKEN: RPAREN  LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
PRINT_EXPR -> print EXPR					PRINT_EXPR -> print EXPR
PARENTHESIZED_EXPR -> PRINT_EXPR				PARENTHESIZED_EXPR -> PRINT_EXPR
TOKEN: RPAREN  LEXEME: )					TOKEN: RPAREN    LEXEME: )
EXPR -> ( PARENTHESIZED_EXPR )					EXPR -> ( PARENTHESIZED_EXPR )
START -> EXPR							START -> EXPR

---- Completed parsing ----					---- Completed parsing ----

